apiVersion: v1
kind: ConfigMap
metadata:
  name: qwen3-mcp-config
  labels:
    app: qwen3-mcp
data:
  config.json: |
    {
      "model": {
        "name": "Qwen3-235B-A22B-Thinking-2507",
        "provider": "openrouter",
        "base_model": "qwen/qwen-2.5-72b-instruct",
        "fine_tuning_params": {
          "learning_rate": 2e-5,
          "num_train_epochs": 3,
          "per_device_train_batch_size": 4,
          "per_device_eval_batch_size": 4,
          "warmup_steps": 100,
          "weight_decay": 0.01,
          "logging_steps": 10,
          "save_steps": 500,
          "evaluation_strategy": "steps",
          "eval_steps": 100,
          "save_total_limit": 3,
          "load_best_model_at_end": true,
          "metric_for_best_model": "eval_loss",
          "greater_is_better": false
        }
      },
      "tools": {
        "enabled": true,
        "max_tools_per_request": 5,
        "timeout_seconds": 30,
        "retry_attempts": 3
      },
      "training": {
        "dataset_path": "training_data.jsonl",
        "validation_split": 0.1,
        "test_split": 0.1,
        "max_sequence_length": 4096,
        "pad_to_max_length": false,
        "use_cache": true
      },
      "openrouter": {
        "api_endpoint": "https://openrouter.ai/api/v1",
        "max_retries": 3,
        "timeout": 60,
        "rate_limit": {
          "requests_per_minute": 60,
          "tokens_per_minute": 90000
        }
      },
      "output": {
        "model_output_dir": "./model/fine_tuned",
        "logs_dir": "./logs",
        "checkpoints_dir": "./checkpoints"
      }
    }
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        resolver kube-dns.kube-system.svc.cluster.local valid=30s;
        
        upstream mcp_backend {
            least_conn;
            server qwen3-mcp-service:8080;
        }
        
        limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=ws_limit:10m rate=5r/s;
        
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
        
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss;
        
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        
        server {
            listen 80;
            server_name _;
            
            location / {
                proxy_pass http://mcp_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                add_header X-Upstream-Server $upstream_addr always;
            }
            
            location /mcp {
                limit_req zone=ws_limit burst=10;
                
                proxy_pass http://mcp_backend;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                proxy_read_timeout 3600s;
                proxy_send_timeout 3600s;
            }
            
            location /api/ {
                limit_req zone=api_limit burst=20;
                
                proxy_pass http://mcp_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                add_header Access-Control-Allow-Origin "*" always;
                add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
                add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
                add_header X-Upstream-Server $upstream_addr always;
                
                if ($request_method = OPTIONS) {
                    return 204;
                }
            }
            
            location /api/v1/health {
                proxy_pass http://mcp_backend;
                proxy_set_header Host $host;
                access_log off;
                add_header X-Upstream-Server $upstream_addr always;
            }
        }
    }
