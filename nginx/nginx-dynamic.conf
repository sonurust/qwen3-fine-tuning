events {
    worker_connections 1024;
}

http {
    # Use Docker's internal DNS resolver
    resolver 127.0.0.11 valid=30s;
    
    # Define upstream with dynamic resolution
    upstream mcp_backend {
        least_conn;
        server mcp-server:8080;  # Docker service name
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=ws_limit:10m rate=5r/s;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;

    # Main server block
    server {
        listen 80;
        server_name localhost;

        # Root endpoint
        location / {
            proxy_pass http://mcp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add instance header for debugging
            add_header X-Upstream-Server $upstream_addr always;
        }

        # WebSocket endpoint for MCP
        location /mcp {
            limit_req zone=ws_limit burst=10;
            
            proxy_pass http://mcp_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeout
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # API endpoints
        location /api/ {
            limit_req zone=api_limit burst=20;
            
            proxy_pass http://mcp_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # CORS headers
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            add_header X-Upstream-Server $upstream_addr always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Health check endpoint
        location /api/v1/health {
            proxy_pass http://mcp_backend;
            proxy_set_header Host $host;
            access_log off;
            add_header X-Upstream-Server $upstream_addr always;
        }
    }
}
